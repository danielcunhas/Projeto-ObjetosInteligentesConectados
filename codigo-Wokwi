#include <WiFi.h>
#include <PubSubClient.h>

// Configurações do broker MQTT
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopic = "topico/nivel-agua";
const char* clientName = "Sensor-nivel-agua"; // Nome do cliente MQTT
const char* mqttUser = "hivemq.webclient.1685115684022"; // Usuário MQTT
const char* mqttPassword = "L8zoiv.01!,DICAJa*2r"; // Senha MQTT

// Pinos do sensor de nível de água
const int triggerPin = 14;
const int echoPin = 12;
const int potentiometerPin = 34; // Pino do potenciômetro

// Instância do cliente MQTT
WiFiClient espClient;
PubSubClient client(espClient);

// Variáveis globais
long previousMillis = 0;
long interval = 5000; // Intervalo de envio dos dados (em milissegundos)

void setup() {
  Serial.begin(115200);

  // Conecta-se à rede Wi-Fi
  connectWiFi();

  // Configura o servidor MQTT
  client.setServer(mqttServer, mqttPort);

  // Configura os pinos do sensor de nível de água
  pinMode(triggerPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // Verifica se é hora de enviar os dados
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    int waterLevel = readWaterLevel();
    publishWaterLevel(waterLevel);
    previousMillis = currentMillis;
  }
}

void connectWiFi() {
  // Conecta-se à rede Wi-Fi
  const char* ssid = "Wokwi-GUEST"; // Substitua pelo nome da sua rede Wi-Fi
  const char* password = ""; // Substitua pela senha da sua rede Wi-Fi

  Serial.print("Conectando-se à rede Wi-Fi...");
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.print("Conexão Wi-Fi estabelecida. Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
  // Reconecta-se ao broker MQTT
  while (!client.connected()) {
    Serial.println("Conectando-se ao broker MQTT...");
    if (client.connect(clientName, mqttUser, mqttPassword)) { // Conecta com o clientName, usuário e senha
      Serial.println("Conexão MQTT estabelecida!");
    } else {
      Serial.print("Falha na conexão MQTT, erro: ");
      Serial.print(client.state());
      Serial.println(" Tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}

int readWaterLevel() {
  // Lê o valor do potenciômetro e mapeia para o intervalo de 0 a 100
  int potValue = analogRead(potentiometerPin);
  return map(potValue, 0, 4095, 0, 100);
}

void publishWaterLevel(int waterLevel) {
  // Publica o valor do nível de água no broker MQTT
  String message = String(waterLevel);
  client.publish(mqttTopic, message.c_str());
  Serial.print("Nível de água publicado: ");
  Serial.println(waterLevel);
}
